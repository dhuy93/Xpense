<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.huyld.xpense.repository.AccountRepository">
	<resultMap type="com.huyld.xpense.model.User" id="User">
		<result column="user_id" property="userId" />
		<result column="username" property="username" />
		<result column="password" property="password"/>
		<result column="created_date" property="createdDate" />
		<result column="del_flg" property="delFlg" />
		<result column="salt" property="salt" />
		<result column="role_id" property="roleId" />
		<result column="role_name" property="roleName" />
	</resultMap>
	<resultMap type="com.huyld.xpense.model.Currency" id="Currency">
		<result column="currency_id" property="currencyId" />
		<result column="currency_name" property="currencyName" />
		<result column="del_flg" property="delFlg" />
		<result column="last_modified" property="lastModified" />
	</resultMap>
	<resultMap type="com.huyld.xpense.model.Balance" id="Balance">
		<result column="account_id" property="accountId" />
		<result column="currency_id" property="currencyId" />
		<result column="start_amount" property="startAmount" />
		<result column="amount" property="amount" />
		<result column="del_flg" property="delFlg" />
		<result column="last_modified" property="lastModified" />
	</resultMap>
	<resultMap type="com.huyld.xpense.model.Account" id="Account">
		<result column="account_id" property="accountId" />
		<result column="account_name" property="accountName" />
		<result column="del_flg" property="delFlg" />
		<result column="created_date" property="createdDate" />
		<result column="last_modified" property="lastModified" />
<!-- 		<association property="user" column="user_id" resultMap="User" /> -->
		<result column="user_id" property="user.userId" />
		<result column="username" property="user.username" />
		<result column="password" property="user.password"/>
		<result column="created_date" property="user.createdDate" />
		<result column="user_del_flg" property="user.delFlg" />
		<result column="salt" property="user.salt" />
		<result column="role_id" property="user.roleId" />
		<result column="role_name" property="user.roleName" />
<!-- 		<association property="balance" resultMap="Balance" /> -->
		<result column="balance_account_id" property="balance.accountId" />
		<result column="balance_currency_id" property="balance.currencyId" />
		<result column="start_amount" property="balance.startAmount" />
		<result column="balance_del_flg" property="balance.delFlg" />
		<result column="balance_last_modified" property="balance.lastModified" />
<!-- 		<association property="currency" column="currency_id" resultMap="Currency" /> -->
		<result column="currency_id" property="currency.currencyId" />
		<result column="currency_name" property="currency.currencyName" />
		<result column="currency_del_flg" property="currency.delFlg" />
		<result column="currency_last_modified" property="currency.lastModified" />
	</resultMap>

	<select id="findAccountByIdAndCurrencyId" parameterType="java.util.Map" resultMap="Account">
		SELECT
			a.account_id, 
			a.account_name,
			a.created_date,
			a.last_modified,
			u.user_id AS user_id,
			u.username AS username,
			u.password AS password,
			u.created_date AS created_date,
			u.del_flg AS user_del_flg,
			u.salt AS salt,
			u.role_id AS role_id,
			b.account_id AS balance_account_id,
			b.currency_id AS balance_currency_id,
			b.del_flg AS balance_del_flg,
			b.start_amount AS start_amount,
			c.currency_id AS currency_id,
			c.currency_name AS currency_name,
			c.del_flg AS currency_del_flg
		FROM
			account a JOIN "user" u ON a.user_id = u.user_id
			JOIN balance b ON b.account_id = a.account_id
			JOIN currency c ON b.currency_id = c.currency_id
		WHERE
			a.account_id = #{accountId}
			AND c.currency_id = #{currencyId}
			AND u.del_flg = false
			AND a.del_flg = false
		ORDER BY c.currency_name;
	</select>

	<select id="findAllAccountByUserId" parameterType="Integer" resultMap="Account">
		SELECT
			a.account_id, 
			a.account_name,
			a.created_date,
			a.last_modified,
			u.user_id,
			u.username,
			u.password,
			u.created_date,
			u.del_flg,
			u.salt,
			u.role_id
		FROM
			account a JOIN "user" u ON a.user_id = u.user_id
		WHERE
			u.del_flg = false
			AND a.del_flg = false
			AND user_id = #{userId}
	</select>

	<select id="findAllAccountByUserName" parameterType="String" resultMap="Account">
		SELECT
			a.account_id, 
			a.account_name,
			a.created_date,
			a.last_modified,
			u.user_id AS user_id,
			u.username AS username,
			u.password AS password,
			u.created_date AS created_date,
			u.del_flg AS user_del_flg,
			u.salt AS salt,
			u.role_id AS role_id,
			b.account_id AS balance_account_id,
			b.currency_id AS balance_currency_id,
			b.del_flg AS balance_del_flg,
			b.start_amount AS start_amount,
			c.currency_id AS currency_id,
			c.currency_name AS currency_name,
			c.del_flg AS currency_del_flg
		FROM
			account a JOIN "user" u ON a.user_id = u.user_id
			JOIN balance b ON b.account_id = a.account_id
			JOIN currency c ON b.currency_id = c.currency_id
		WHERE
			u.del_flg = false
			AND a.del_flg = false
			AND username = #{username}
		ORDER BY c.currency_name;
	</select>

	<insert id="addNewAccountAndBalance" parameterType="Account">
		WITH inserted_account AS (
			INSERT INTO account(
				account_name,
				del_flg,
				user_id,
				created_date,
				last_modified
			) VALUES (
				#{accountName},
				false,
				#{user.userId},
				now(),
				now()
			) RETURNING account_id
		)
		INSERT INTO balance(
			account_id,
			currency_id,
			del_flg,
			start_amount,
			last_modified)	
		SELECT
			account_id,
			#{currency.currencyId},
			false,
			#{balance.startAmount},
			now()
		FROM inserted_account;
	</insert>

	<insert id="addNewBalanceForExistingAccount" parameterType="Account">
		UPDATE account
		SET
			account_name=#{accountName},
			del_flg=#{delFlg},
			user_id=#{user.userId},
			last_modified=now()
		WHERE
			account_id = #{accountId}
			AND last_modified = #{lastModified};
		INSERT INTO balance(
			account_id,
			currency_id,
			del_flg,
			start_amount,
			last_modified)	
		VALUES (
			#{accountId},
			#{currency.currencyId},
			false,
			#{balance.startAmount},
			now());
	</insert>

	<update id="updateAccount" parameterType="Account">
		UPDATE account
		SET
			account_name=#{accountName},
			del_flg=#{delFlg},
			user_id=#{user.userId},
			last_modified=now()
		WHERE
			account_id = #{accountId}
			AND last_modified = #{lastModified};
		UPDATE
			balance
		SET
			start_amount=#{balance.startAmount},
			last_modified=now()
		WHERE
			account_id = #{accountId}
			AND currency_id = #{currency.currencyId}
			AND last_modified = #{balance.lastModified};
	</update>
</mapper>